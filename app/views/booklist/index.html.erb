<% provide(:title, 'Booklist') %>

<h1>Booklist</h1>

<p>
I enjoy reading novels. Recently, a friend of mine and I have started an interesting project: Read 100 well-known, classic, or interesting novels.
 My friend and I store the novel and author data in some Google spreadsheets online. Below I've put together a few graphs and graphs using Google's Document API and D3.js to better visualise the novels and associated authors.
</p>

<h3>The Novels</h3>
<div id="table-div-1" class="chart"></div>

<h3>Average Age of Novels By Country</h3>
<div id="chart-div-1" class="chart"></div>

<h3>Frequency of Novels by Country</h3>
<div id="chart-div-2" class="chart"></div>

<h3>Influencing Authors</h3>
<div id="chart-div-3" class="chart"></div>

<script>
	google.load('visualization', '1', {'packages': ['geochart', 'table']});
	google.setOnLoadCallback(drawMap);
	 
	var ageChart = 1;
	var freqChart = 2;
	var tableId = 1;
	var links = [];
	var charts = $('.chart');
	
	$.getJSON("http://cors.io/spreadsheets.google.com/feeds/list/0AsN8GeI30lYodHBkY0RHUjFCckRRN0xVN0MybDZqeXc/3/public/values?alt=json", function(data) {
		links = [];
		var sheet = data.feed.entry;
		_.each (sheet, function(row) {
			links.push({"source": row['gsx$influencer']['$t'], "target": row['gsx$influenced']['$t'], "type": "influence"});
		});

		var nodes = {};

		// Compute the distinct nodes from the links.
		links.forEach(function(link) {
			link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
			link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
		});

		var w = 900,
			h = 700;

		var force = d3.layout.force()
			.nodes(d3.values(nodes))
			.links(links)
			.size([w, h])
			.linkDistance(60)
			.charge(-300)
			.on("tick", tick)
			.start();
	
		var width = $('.chart:first').width();
		var height = $('.chart:first').height();
		var svg = d3.select("#chart-div-3").append("svg:svg")
			//.attr("width", "100%")
			//.attr("height", "700");
			.attr("width", '100%')
			.attr("height", '100%')
			.attr('viewBox','0 0 '+Math.min(w,h)+' '+Math.min(w,h))
			.attr('preserveAspectRatio','xMinYMin');

		// Per-type markers, as they don't inherit styles.
		svg.append("svg:defs").selectAll("marker")
			.data(["influence"])
		  .enter().append("svg:marker")
			.attr("id", String)
			.attr("viewBox", "0 -5 10 10")
			.attr("refX", 15)
			.attr("refY", -1.5)
			.attr("markerWidth", 6)
			.attr("markerHeight", 6)
			.attr("orient", "auto")
		  .append("svg:path")
			.attr("d", "M0,-5L10,0L0,5");

		var path = svg.append("svg:g").selectAll("path")
			.data(force.links())
		  .enter().append("svg:path")
			.attr("class", function(d) { return "link " + d.type; })
			.attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

		var circle = svg.append("svg:g").selectAll("circle")
			.data(force.nodes())
		  .enter().append("svg:circle")
			.attr("r", 6)
			.call(force.drag);

		var text = svg.append("svg:g").selectAll("g")
			.data(force.nodes())
		  .enter().append("svg:g");

		// A copy of the text with a thick white stroke for legibility.
		text.append("svg:text")
			.attr("x", 8)
			.attr("y", 1)
			.attr("class", "shadow")
			.text(function(d) { return d.name; });

		text.append("svg:text")
			.attr("x", 8)
			.attr("y", 1)
			.text(function(d) { return d.name; });

		// Use elliptical arc path segments to doubly-encode directionality.
		function tick() {
		  path.attr("d", function(d) {
			var dx = d.target.x - d.source.x,
				dy = d.target.y - d.source.y,
				dr = Math.sqrt(dx * dx + dy * dy);
			return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
		  });

		  circle.attr("transform", function(d) {
			return "translate(" + d.x + "," + d.y + ")";
		  });

		  text.attr("transform", function(d) {
			return "translate(" + d.x + "," + d.y + ")";
		  });
		}	  
	  
	});
 
	function drawMap() {
		var tableQuery = new google.visualization.Query('http://spreadsheets.google.com/tq?key=0AsN8GeI30lYodHBkY0RHUjFCckRRN0xVN0MybDZqeXc&pub=1&gid=0');
		tableQuery.setQuery('select A, B, C, D, E WHERE E > 100');
		tableQuery.send(handleTableQueryResponse);

		var avgAgeQuery = new google.visualization.Query('http://spreadsheets.google.com/tq?key=0AsN8GeI30lYodHBkY0RHUjFCckRRN0xVN0MybDZqeXc&pub=1&gid=0');
		avgAgeQuery.setQuery('select D, avg(E) group by D');
		//avgAgeQuery.send(handleChartQueryResponse);
		avgAgeQuery.send(handleAgeChart);

		var freqCountryQuery = new google.visualization.Query('http://spreadsheets.google.com/tq?key=0AsN8GeI30lYodHBkY0RHUjFCckRRN0xVN0MybDZqeXc&pub=1&gid=0');
		freqCountryQuery.setQuery('select D, count(E) group by D');
		freqCountryQuery.send(handleFreqChart);
	};
	
	function handleChart(response, callback) {
		if (response.isError()) {
			console.log('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
			return;
		}
		var data = response.getDataTable();
		var formatter = new google.visualization.NumberFormat({
			fractionDigits: 0
		});
		formatter.format(data, 1); // Apply formatter to second column.  
		callback(data);
	};
 
	function handleAgeChart(response) {
		handleChart(response, function(data) {
			var visualization = new google.visualization.GeoChart(document.getElementById('chart-div-' + ageChart));
			visualization.draw(data, null);
		});
	};
 
	function handleFreqChart(response) {
		handleChart(response, function(data) {
			var visualization = new google.visualization.GeoChart(document.getElementById('chart-div-' + freqChart));
			visualization.draw(data, null);
		});
	}; 
 
	function handleTableQueryResponse(response) {
		if (response.isError()) {
			//console.log('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
			return;
		}
		var data = response.getDataTable();

		var visualization = new google.visualization.Table(document.getElementById('table-div-' + tableId));
		visualization.draw(data, null);
	}; 
</script>